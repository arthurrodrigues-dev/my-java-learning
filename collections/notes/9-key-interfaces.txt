9 Keys interfaces of Collection Framework:

1. Collection:

-> Collection interface defines the most common methods which are applicable for any Collection object;
-> In general, collection interface is considered as root interface of Collection Framework.
NOTE: There is no concrete class which implements collection interface directly.

# Collection vs Collections:
# Collection is a interface!
# Collections is an utility class present in java.util.package to define several utility methods (like sorting, searching...) for Collection objects

2. List:

-> List is child interface of Collection;
-> If we want to represent a group of individual objects as a single entity where duplicates are allowed and insertion order
preserved then we should go for List;
-> List implementations: 
- LinkedList; 
- ArrayList;
- Vector: Stack.

3. Set:

-> It is child interface of Collection;
-> If we want to represent a group of individual objects as a single entity where duplicates are now allowed and insertion order
not preserved then we can go for Set;
-> Set implementations: 
- HashSet: LinkedHashSet

# Differences between List and Set:

List                          |              Set
                              |                        
1. Duplicates allowed;        | 1. Duplicates not allowed;
2. Insertion order preserved. | 2. Insertion order not preserved.

4. SortedSet

-> It is child interface of Set;
-> If we want to represent a group of individual objects as a single entity where duplicates are not allowed but all objects should be
inserted according to some sorting order then we should go for SortedSet.

5. Navigable Set

-> It is child interface of SortedSet, it defines several methods for navigation purposes;
-> Implementation class of Navigable Set interface is TreeSet. 

6. Queue

-> It is child interface of Collection;
-> If we want to represent a group of individual objects prior to processing then we should go for Queue;
-> For example: before sending a mail all mail id's we have to store somewhere and in which order we saved in the same order
mail's should be delivered (First in First Out) for this requirement, Queue concept is the best choice.
-> Queue implementations: 
- PriorityQueue;
- BlockingQueue: LinkedBlockingQueue, PriorityBlockingQueue.

7. Map

-> Map is not child interface of Colleciton;
-> If we want to represent a group of individual objects as key value pairs then should go for Map;
-> Both key and value are objects, duplicated keys are not allowed but values can be duplicated.
-> Map implementations:
- HashMap: LinkedHashMap;
- WeakHashMap;
- IdentityHashMap;
- Dictionary: Hashtable, Properties.

8. SortedMap

-> It is child interface of Map
-> If we want to represent a group of individual objects as key value pairs accordint to some sorting order of keys,
then we should go for SortedMap.

9. NavigableMap

-> It is child interface of SortedMap, it defines several utility methods for navigation purposes;
-> NavigableMap implementation: TreeMap.

-----------------
Sorting:
1. Comparable;
2. Comparator.
-----------------
Cursors:
1. Enumeration;
2. Iterator;
3. ListIterator.
-----------------
Utility classes:
1. Collections
2. Arrays

