TreeSet

-> Underlying DS for TreeSet is Balanced Tree.
-> Duplicate objects are not allowed.
-> Insertion order not preserved, but all objects will be inserted acorrding to some sorting order.
-> Heterogeneous objects are not allowed.
-> Null insertion not allowed.
-> If we are depending on default natural sorting order, then objets should be homogeneous and comparable. Otherwise we will get runtime exception saying ClassCastException.
-> An object is said to be Comparable if and only if the corresponding class implements java.lang.comparable interface.

TreeSet Constructors

1. TreeSet t = new TreeSet();
-> Creates an empty TreeSet object where elements will be inserted according to default natural sorting order.

2. TreeSet t = new TreeSet(Comparator c);
-> Creates an empty TreeSet object where elements will be inserted according to customized sorting order.

TreeSet t = new TreeSet(SortedSet s);
TreeSet t = new TreeSet(Collection c);

Comparable interface
-> All wrapper classes and String class implement comparable interface.
-> This interface present in java.lang.package contains only one method:
- public int compareTo(Object obj);

Example:
obj1.compareTo(obj2);

-> returns negative value if obj1 has to come before obj2
-> returns positive value if obj1 has to come after obj2
-> returns 0 if obj1 and obj2 are equal

If we depending on default natural sorting order, internally JVM will call compareTo() method while inserting objects to the TreeSet.
Hence the objects should be Comparable.

Note:
1. If we are not satisfied with default natural sorting order of if the
natural sorting order is not already available then we can define our
own customized sorting order by using Comparator.

2. Comparable ment for Default Natural Sorting Order where as Comparator ment for Customized Sorting Order.

Comparator interface

-> We can use comparator to define our own Customized Sorting Order.
-> The only implemented classes of Comparator are Collator and RuleBasedCollator.
-> Present in java.util.package.
-> Comparator has two methods:

- public int compare(Object obj1, Object obj2);
-> Exactly behavior of compareTo()

- public boolean equals();

!! IMPORTANT

-> Whenever we are implementing Comparator interface, compulsory we should provide implementation for compare() method.

-> And implementing equals() method is optional, because it is already
available in every java class from Object class through inheritance.

-> If we are defining our own sorting by Comparator, the objects do not need to be Comparable.

-> For predefined Comparable classes like String, default natural 
sorting order is already available. If we are not satisfied with that,
we cann define our own sorting by Comparator object.

-> For our own classes, the person who is writing is responsible to
define default natural sorting order by implementing Comparable Interface. The person who is using our class, if not satisfied with
it, then he can define his own sorting by using Comparator. 