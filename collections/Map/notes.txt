Introduction to Map

-> Map is NOT child interface of Collection, bc collection are used to represent single objects.
-> If we want to represent a group of objects as key-value pairs we should go for Map.
-> Duplicate keys are not allowed, but values are.
-> Each key-value is called as Entry and a map is a group of Entrys.
-> Both keys and values are objects only.
-> Map is a collection of Entry objects.
-> Map contains it's own specific methods so collection methods we can't use for map
because concepts are different.
-> Entry interface is defined inside Map interface only.

Specific Methods:

Object put(Object key, Object value); 
-> If we try to insert a new Entry but the key is already in the map,
the value will be replaced and old value will be returned. Otherwise, null is returned.

void putAll(Map m);
-> Put all the entries from a map to another.

Object get(Object key);
-> Get value from a corresponding key. If the key is not there, we'll get null.

Object remove(Object key);
-> Removes the entry associated with specified key.

boolean containsKey(Object key);
-> Check if the key is in the map.

boolean containsValue(Object value);
-> Check if the value is in the map.

boolean isEmpty();
-> Check if the map is empty.

int size();
-> Return number of key-value pairs.

void clear();
-> Clear the map.

Collections views of Map:

Set keySet();
-> Return a set containing all the keys from the map.

Collection values();
-> Return a collection containing all the values from the map.

Set entrySet();
-> Return a set containing all the entries from the map.

